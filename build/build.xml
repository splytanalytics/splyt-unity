<?xml version="1.0" encoding="UTF-8"?>
<!-- http://ant.apache.org/manual/ifunless.html -->
<project name="splyt-cs" xmlns:if="ant:if" xmlns:unless="ant:unless" basedir="./.." default="build-package">
    
    <!-- bring in ant contrib 
    http://sourceforge.net/projects/ant-contrib/files/ant-contrib/ant-contrib-0.6/ant-contrib-0.6-bin.zip/download -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" unless:true="${init.hasrun}">
        <classpath>
            <pathelement location="${basedir}/../common/build/tasks/ant-contrib-0.6.jar"/>
        </classpath>
    </taskdef>
    
    <!-- 
    COMMON PROPERTIES -->
    <property name="package.location" value="${basedir}/bin" unless:set="package.location"/>
    <property name="doxygen.location" value="/usr/local/bin/doxygen" unless:set="doxygen.location"/>
    <property name="unity3d.location" value="/Applications/Unity/Unity.app/Contents/MacOS/Unity" unless:set="unity3d.location"/>
    
    <!-- preventing verbose warnings like "Trying to override old definition of task..." and "Override ignored for property..." -->
    <property name="init.hasrun" value="true" unless:set="init.hasrun"/>
    
	<!--
	BUILD-PACKAGE
	Default package target which clean the environment, generates docs, packages
	everything up and puts it in the packages folder -->
	<target name="build-package" depends="
		check-installed-software,
		clean-package,
		current-git-sha1,
		generate-docs,
        build-unity-materials,
		assemble-parts,
		create-archive
	"/>

    <macrodef name="check-one-install">
        <attribute name="application"/>
        <sequential>
            <!-- Check provided path for file -->
            <available file="${@{application}.location}" property="@{application}.installed"/>
            <if>
                <equals arg1="${@{application}.installed}" arg2="true"/>
                <then>
                    <echo message="@{application} is installed!!!"/>
                </then>
                <else>
                    <echo message="@{application} not found.  Skipping @{application} steps!!!"/>
                </else>
            </if>
        </sequential>
    </macrodef>
    
	<!--
	CHECK-INSTALLS
	Checks to see if necessary software can be detected and either installs it or prompts the user to do so. -->
	<target name="check-installed-software" unless="${check-installed-softare.hasrun}">
        <property name="check-installed-softare.hasrun" value="true"/>
        <check-one-install application="doxygen"/>
        <check-one-install application="unity3d"/>
	</target>

    <!--
    CLEAN-PACKAGE
    Removes the directory that we are about to create if it exists -->
    <target name="clean-package" depends="current-git-sha1">
        <!-- nuke the package destination -->
        <delete dir="${package.folder}" failOnError="false" includeEmptyDirs="true"/>
        <mkdir dir="${package.folder}"/>
    	<delete dir="${basedir}/doc/html" failOnError="false" includeEmptyDirs="true"/>
    </target>

	<!--
	CURRENT-GIT-SHA
	Queries the git repository for the shortened SHA-1 of the repository and creates property out 
	of it called current-git-sha1. --> 
	<target name="current-git-sha1">
		<exec executable="git" dir="${basedir}" outputproperty="current-git-sha1">
			<arg value="log"/>
			<arg value="--pretty=format:%h"/>
			<arg value="-n 1"/>
		</exec>
		<echo message="Current (shortened) repository SHA-1: ${current-git-sha1}"/>
		
		<property name="package.name" value="splyt-unity-${current-git-sha1}"/>
		<property name="package.folder" value="${package.location}/${package.name}"/>
	</target>

	<!--
	GENERATE-DOCS
	Generate documentation using jsdoc -->
	<target name="generate-docs" if="doxygen.installed" depends="check-installed-software">
		<exec dir="${basedir}/doc" executable="${doxygen.location}">
			<arg value="splyt.dox"/>
		</exec>
	</target>

    <target name="execute-unity-method" if="unity3d.installed" depends="check-installed-software">
<!--  TODO - make sure Unity isn't already running  -->
        <exec executable="${unity3d.location}">
            <arg value="-batchmode"/>
            <arg value="-quit"/>
            <arg value="-projectpath"/>
            <arg value="${basedir}/samples/BubblePop"/>
            <arg value="-logFile"/>
            <arg value="/dev/stdout"/>
            <arg value="-executeMethod"/>
            <arg value="${unity-method}"/>
        </exec>
    </target>
    
    <!-- 
    BUILD UNITY MATERIALS
    Build the necessary *.unitypackage's -->
    <target name="build-unity-materials">
        <antcall target="execute-unity-method">
            <param name="unity-method" value="Builder.MakeSplytPackage"/>
        </antcall>
        <antcall target="execute-unity-method">
            <param name="unity-method" value="Builder.MakeBPPackage"/>
        </antcall>
    </target>
    
	<!--
	ASSEMBLE-PARTS
	Copy all parts of the SDK as checked in to their appropriate customer facing locations -->
	<target name="assemble-parts" depends="generate-docs">
		<!-- documentation -->
		<copy todir="${package.folder}/doc">
			<fileset dir="${basedir}/doc/html"/>
		</copy>

		<!-- code -->
		<copy todir="${package.folder}/packages">
			<fileset dir="${basedir}/bin">
                <include name="*.unitypackage"/>
            </fileset>
		</copy>
		
		<!-- samples -->
		<copy todir="${package.folder}/samples/BubblePop">
			<fileset dir="${basedir}/samples/BubblePop">
                <include name="Assets/**"/>
                <include name="ProjectSettings/**"/>
                <exclude name="Assets/Editor/Builder.*"/>
                <exclude name="Assets/Editor/PostprocessBuildPlayer.*"/>
            </fileset>
		</copy>

		<!-- readme -->
		<copy file="${basedir}/readme.md" todir="${package.folder}"/>
	</target>

	<!--
	CREATE-ARCHIVE
	Zip up the package -->
	<target name="create-archive" depends="assemble-parts">
		<exec dir="${package.folder}/.." executable="zip">
			<arg value="-r"/>
			<arg value="-m"/>
			<arg value="-q"/>
			<arg value="${package.name}.zip"/>
			<arg value="${package.name}"/>
		</exec>
	</target>

</project>
